        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*This file is meant to test playCard() functionality*/
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <assert.h>
        -:    8:#include "rngs.h"
        -:    9:
function main called 1 returned 100% blocks executed 70%
        1:   10:int main() {
        1:   11:	int seed = 1000;
        1:   12:	int numPlayers = 2;
        1:   13:	int thisPlayer = 0;
        -:   14:	struct gameState G, testG;
        1:   15:	int k[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   16:		sea_hag, tribute, smithy, council_room };
        1:   17:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   18:	printf("Testing playCard()...\n\n");
call    0 returned 100%
        1:   19:	G.hand[thisPlayer][0] = smithy;
        1:   20:	G.hand[thisPlayer][1] = copper;
        1:   21:	G.hand[thisPlayer][2] = silver;
        1:   22:	G.hand[thisPlayer][3] = gold;
        1:   23:	G.hand[thisPlayer][4] = estate;
        -:   24:
        -:   25:	int initialNumActions;
        -:   26:	//test to see if card is played in the correct phase
        1:   27:	printf("Testing phase functionality...\n");
call    0 returned 100%
        1:   28:	G.phase = -1;
        1:   29:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   30:	int result = playCard(0, 0, 0, 0, &testG);
call    0 returned 100%
        1:   31:	if (result == -1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   32:		printf("Test PASSED. Could not play card when not the right phase.\n\n");
call    0 returned 100%
        -:   33:	}
    #####:   34:	else if (result == 0) {
branch  0 never executed
branch  1 never executed
    #####:   35:		printf("Test FAILED. Card played when it was not supposed to.\n\n");
call    0 never executed
        -:   36:	}
        -:   37:
        1:   38:	G.phase = 0;
        1:   39:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   40:	initialNumActions = testG.numActions;
        1:   41:	result = playCard(0, 0, 0, 0, &testG);
call    0 returned 100%
        1:   42:	if (result == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   43:		printf("Test PASSED. Card played card when appropriate.\n");
call    0 returned 100%
        1:   44:		if (testG.numActions == (initialNumActions - 1)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   45:			printf("Correct number of actions after function call.\n\n");
call    0 returned 100%
        -:   46:		}
        -:   47:		else {
    #####:   48:			printf("Incorrect number of actions after function call.\n\n");
call    0 never executed
        -:   49:		}
        -:   50:	}
    #####:   51:	else if (result == -1) {
branch  0 never executed
branch  1 never executed
    #####:   52:		printf("Test FAILED. Card played when it was not supposed to.\n\n");
call    0 never executed
        -:   53:	}
        -:   54:	//check to see if enough actions exist
        1:   55:	printf("Testing number of actions functionality...\n");
call    0 returned 100%
        1:   56:	G.numActions = 0;
        1:   57:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   58:	result = playCard(0, 0, 0, 0, &testG);
call    0 returned 100%
        1:   59:	if (result == -1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   60:		printf("Test PASSED. No actions to take.\n\n");
call    0 returned 100%
        -:   61:	}
    #####:   62:	else if (result == 0) {
branch  0 never executed
branch  1 never executed
    #####:   63:		printf("Test FAILED. Action taken when none were available.\n\n");
call    0 never executed
        -:   64:	}
        1:   65:	G.numActions = 1;
        1:   66:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   67:	initialNumActions = testG.numActions;
        1:   68:	result = playCard(0, 0, 0, 0, &testG);
call    0 returned 100%
        1:   69:	if (result == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   70:		printf("Test PASSED. Action taken when available.\n");
call    0 returned 100%
        1:   71:		if (testG.numActions == (initialNumActions - 1)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   72:			printf("Correct number of actions after function call.\n\n");
call    0 returned 100%
        -:   73:		}
        -:   74:		else {
    #####:   75:			printf("Incorrect number of actions after function call.\n\n");
call    0 never executed
        -:   76:		}
        -:   77:	}
    #####:   78:	else if (result == -1) {
branch  0 never executed
branch  1 never executed
    #####:   79:		printf("Test FAILED. Action taken when unavailable.\n");
call    0 never executed
        -:   80:	}
        -:   81:
        -:   82:	//check to see if a treasure card is trying to be played
        1:   83:	printf("Testing card input functionality...\n");
call    0 returned 100%
        1:   84:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   85:	result = playCard(1, 0, 0, 0, &testG);
call    0 returned 100%
        1:   86:	if (result == -1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   87:		printf("Test PASSED. Treasure card cannot be played.\n\n");
call    0 returned 100%
        -:   88:	}
    #####:   89:	else if (result == 0) {
branch  0 never executed
branch  1 never executed
    #####:   90:		printf("Test FAILED. Cannot play treasure card.\n");
call    0 never executed
        -:   91:	}
        -:   92:
        -:   93:	//make sure coins are updated.
        -:   94:	//would like to test this but a good use case does not exist with the cards in this deck
        1:   95:	return 0;
        -:   96:}
