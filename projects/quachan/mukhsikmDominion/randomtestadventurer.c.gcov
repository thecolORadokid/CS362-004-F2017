        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion_helpers.h"
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:#include <assert.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <time.h>
        -:    8:
function checkAdventurer called 20000 returned 100% blocks executed 86%
    20000:    9:int checkAdventurer(int currentPlayer, struct gameState *state, int handPos, int drawntreasure, int seed, int initalHandCount) {
        -:   10:	int temphand[MAX_HAND];
    20000:   11:	int z = 0;
    20000:   12:	int cardDrawn = 0;
    20000:   13:	int result = adventurerEffect(state, currentPlayer, drawntreasure, z, cardDrawn, temphand);
call    0 returned 100%
    20000:   14:	assert(result == 0 && "Seed: %d, Failed to execute.\n");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    20000:   15:	if (state->handCount[currentPlayer] != initalHandCount + 1) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    19941:   16:		printf("Seed: %d, test failed, incorrect number of cards in hand.\n", seed);
call    0 returned 100%
        -:   17:	}
        -:   18:	else {
       59:   19:		printf("Seed: %d, test passed.\n", seed);
call    0 returned 100%
        -:   20:	}
    20000:   21:}
        -:   22:
function main called 1 returned 100% blocks executed 100%
        1:   23:int main() {
        1:   24:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   25:	int i, j, n, seed, initialHandCount;
        1:   26:	int thisPlayer = 0;
        1:   27:	int numTests = 20000;
        1:   28:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   29:		sea_hag, tribute, smithy };
        -:   30:
        1:   31:	printf("Testing Adventurer...\n");
call    0 returned 100%
        -:   32:	struct gameState G;
        -:   33:
    20001:   34:	for (n = 0; n < numTests; n++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    20000:   35:		seed = rand() % RAND_MAX;
call    0 returned 100%
    20000:   36:		initializeGame(2, k, seed, &G);
call    0 returned 100%
    20000:   37:		G.handCount[thisPlayer] = rand() % MAX_HAND + 1 ;
call    0 returned 100%
    20000:   38:		initialHandCount = G.handCount[thisPlayer];
    20000:   39:		G.deckCount[thisPlayer] = rand() % MAX_DECK + 1;
call    0 returned 100%
    20000:   40:		int adventurerPos = rand() % G.handCount[thisPlayer];
call    0 returned 100%
  4982149:   41:		for (i = 0; i < G.handCount[thisPlayer]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  4962149:   42:			G.hand[thisPlayer][i] = rand() % (22) + 4;
call    0 returned 100%
        -:   43:		}
    20000:   44:		G.hand[thisPlayer][adventurerPos] = adventurer;
  5039068:   45:		for (j = 0; j < G.deckCount[thisPlayer]; j++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  5019068:   46:			G.hand[thisPlayer][i] = rand() % (22) + 4;
call    0 returned 100%
        -:   47:		}
    20000:   48:		checkAdventurer(thisPlayer, &G, adventurerPos, 0, seed, initialHandCount);
call    0 returned 100%
        -:   49:	}
        1:   50:	printf("TEST COMPLETE. Errors listed above.");
call    0 returned 100%
        1:   51:	return 0;
        -:   52:}
