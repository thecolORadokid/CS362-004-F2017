        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
function main called 1 returned 100% blocks executed 83%
        1:    9:int main() {
        1:   10:	int seed = 1000;
        1:   11:	int numPlayers = 2;
        1:   12:	int thisPlayer = 0;
        -:   13:	struct gameState G, testG;
        1:   14:	int k[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   15:		sea_hag, tribute, smithy, council_room };
        1:   16:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   17:
        1:   18:	printf("Testing isGameOver()...\n");
call    0 returned 100%
        1:   19:	G.supplyCount[province] = 0;
        1:   20:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   21:	int result = isGameOver(&testG);
call    0 returned 100%
        1:   22:	if (result) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   23:		printf("Test PASSED. Game ended with Province supply at 0.\n\n");
call    0 returned 100%
        -:   24:	}
        -:   25:	else {
    #####:   26:		printf("Test FAILED. Province supply depleted, game not ended.\n");
call    0 never executed
        -:   27:	}
        -:   28:
        1:   29:	G.supplyCount[smithy] = 0;
        1:   30:	G.supplyCount[adventurer] = 0;
        1:   31:	G.supplyCount[mine] = 0;
        1:   32:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   33:	result = isGameOver(&testG);
call    0 returned 100%
        -:   34:
        1:   35:	if (result) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   36:		printf("Test PASSED. Game ended with 3 empty supply piles.\n\n");
call    0 returned 100%
        -:   37:	}
        -:   38:	else {
    #####:   39:		printf("Test FAILED. 3 empty piles.\n");
call    0 never executed
        -:   40:	}
        1:   41:	return 0;
        -:   42:}
