        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:
        -:    7:// returns 0 if card is of treasure type
function isTreasureCard called 2 returned 100% blocks executed 50%
        2:    8:int isTreasureCard(int card) {
        2:    9:    if (card == copper || card == silver || card == gold) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:   10:        return 0;
        -:   11:    }
    #####:   12:    return 1;
        -:   13:}
        -:   14:
function main called 1 returned 100% blocks executed 81%
        1:   15:int main() {
        1:   16:    printf("Testing card adventurer\n");
call    0 returned 100%
        -:   17:    // the tests will fail because bugs were intentionally added to smithy
        -:   18:    // in previous assignment
        -:   19:    struct gameState state;
        1:   20:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   21:        sea_hag, tribute, smithy};
        1:   22:    int randomSeed = 5;
        1:   23:    int player = 0;
        1:   24:    int handPos = 0;
        1:   25:    int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   26:
        1:   27:    initializeGame(3, k, randomSeed, &state);
call    0 returned 100%
        1:   28:    int prevHandCount = state.handCount[player];
        -:   29:    // int prevDeckCount = state.deckCount[player];
        1:   30:    cardEffect(adventurer, choice1, choice2, choice3, &state, handPos, &bonus);
call    0 returned 100%
        -:   31:    // adventurer is supposed to add 2 treasure cards to hand
        1:   32:    if (state.handCount[player] == prevHandCount + 2) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:        printf("adventurer: PASS hand count=%d expected=%d\n", state.handCount[player], prevHandCount+2);
call    0 never executed
        -:   34:    } else {
        1:   35:        printf("adventurer: FAIL hand count=%d expected=%d\n", state.handCount[player], prevHandCount+2);
call    0 returned 100%
        -:   36:    }
        -:   37:    // last two cards in hand should be treasure cards
        1:   38:    int lastCard = state.hand[player][state.handCount[player]-1];
        1:   39:    int beforeLast = state.hand[player][state.handCount[player]-2];
        1:   40:    if (isTreasureCard(lastCard) == 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   41:        printf("adventurer: PASS last card is treasure\n");
call    0 returned 100%
        -:   42:    } else {
    #####:   43:        printf("adventurer: FAIL last card is not treasure\n");
call    0 never executed
        -:   44:    }
        1:   45:    if (isTreasureCard(beforeLast) == 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   46:        printf("adventurer: PASS before last card is treasure\n");
call    0 returned 100%
        -:   47:    } else {
    #####:   48:        printf("adventurer: FAIL before last card is not treasure\n");
call    0 never executed
        -:   49:    }
        1:   50:    return 0;
        -:   51:}
