        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <time.h>
        -:    9:
        -:   10:
function checkSmithy called 20000 returned 100% blocks executed 86%
    20000:   11:int checkSmithy(int currentPlayer, struct gameState *post, int handPos, int seed, int initialHandCount) {
        -:   12:
    20000:   13:	int inital = post->handCount[currentPlayer];
    20000:   14:	int result = smithyEffect(post, handPos, currentPlayer);
call    0 returned 100%
    20000:   15:	int final = post->handCount[currentPlayer];
    20000:   16:	assert(result == 0 && "Failed to execute");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
    20000:   17:	if (post->handCount[currentPlayer] != initialHandCount + 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    20000:   18:		printf("Seed: %d, test failed.", seed);
call    0 returned 100%
    20000:   19:		printf("Initial # cards in hand: %d, Final # cards in hand: %d \n", inital, final);
call    0 returned 100%
        -:   20:	}
        -:   21:	//assert(post->handCount[currentPlayer] == initialHandCount + 2);
    20000:   22:}
        -:   23:
function main called 1 returned 100% blocks executed 100%
        1:   24:int main() {
        1:   25:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   26:	int n, seed;
        1:   27:	int thisPlayer = 0;
        1:   28:	int numTests = 20000;
        1:   29:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   30:		sea_hag, tribute, smithy };
        -:   31:	
        1:   32:	printf("Testing Smithy...\n");
call    0 returned 100%
        -:   33:	struct gameState G;
        -:   34:	
        -:   35:	//initializeGame(2, k, 10, &G);
        -:   36:	//memcpy(&testG, &G, sizeof(struct gameState));
        -:   37:
    20001:   38:	for (n = 0; n < numTests; n++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    20000:   39:		seed = rand() % RAND_MAX;
call    0 returned 100%
    20000:   40:		initializeGame(2, k, seed, &G);
call    0 returned 100%
    20000:   41:		int smithyPos = rand() % G.handCount[thisPlayer];
call    0 returned 100%
    20000:   42:		G.hand[thisPlayer][smithyPos] = smithy;
    20000:   43:		checkSmithy(thisPlayer, &G, smithyPos, seed, G.handCount[thisPlayer]);
call    0 returned 100%
        -:   44:		
        -:   45:	}
        1:   46:	printf("%d Tests complete. Unsuccessful tests shown above.", numTests);
call    0 returned 100%
        1:   47:	return 0;
        -:   48:}
