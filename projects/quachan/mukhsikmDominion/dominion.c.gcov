        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  1800301:    8:int compare(const void* a, const void* b) {
  1800301:    9:  if (*(int*)a > *(int*)b)
        1:   10:    return 1;
  1800300:   11:  if (*(int*)a < *(int*)b)
   480084:   12:    return -1;
  1320216:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    60008:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    60008:   44:  SelectStream(1);
    60008:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    60008:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    60008:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   660088:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  6600880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  6000800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    60008:   73:  if (numPlayers == 2)
        -:   74:    {
    60005:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        3:   77:  else if (numPlayers == 3)
        -:   78:    {
        3:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    60008:   87:  if (numPlayers == 2)
        -:   88:    {
    60005:   89:      state->supplyCount[estate] = 8;
    60005:   90:      state->supplyCount[duchy] = 8;
    60005:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        3:   95:      state->supplyCount[estate] = 12;
        3:   96:      state->supplyCount[duchy] = 12;
        3:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    60008:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    60008:  102:  state->supplyCount[silver] = 40;
    60008:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  1260168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  9901320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  9301240:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   600080:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
   120008:  115:		  if (numPlayers == 2){ 
    60001:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        3:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   540076:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   600080:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  8701160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   180027:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
   120019:  140:      state->deckCount[i] = 0;
   480076:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
   360057:  143:	  state->deck[i][j] = estate;
   360057:  144:	  state->deckCount[i]++;
        -:  145:	}
   960152:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   840133:  148:	  state->deck[i][j] = copper;
   840133:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   180027:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
   120019:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   180027:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   120019:  166:      state->handCount[i] = 0;
   120019:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1680224:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
  1620216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    60008:  182:  state->outpostPlayed = 0;
    60008:  183:  state->phase = 0;
    60008:  184:  state->numActions = 1;
    60008:  185:  state->numBuys = 1;
    60008:  186:  state->playedCardCount = 0;
    60008:  187:  state->whoseTurn = 0;
    60008:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   360048:  192:  for (it = 0; it < 5; it++){
   300040:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    60008:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    60008:  198:  return 0;
        -:  199:}
        -:  200:
   120976:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   120976:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   120976:  209:  if (state->deckCount[player] < 1)
      954:  210:    return -1;
   120022:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1440249:  214:  while (state->deckCount[player] > 0) {
  1200205:  215:    card = floor(Random() * state->deckCount[player]);
  1200205:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1200205:  217:    newDeckPos++;
  3900528:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
  2700323:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1200205:  221:    state->deckCount[player]--;
        -:  222:  }
  1320227:  223:  for (i = 0; i < newDeckPos; i++) {
  1200205:  224:    state->deck[player][i] = newDeck[i];
  1200205:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   120022:  228:  return 0;
        -:  229:}
        -:  230:
        5:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        5:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        5:  237:  if (state->phase != 0)
        -:  238:    {
        1:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        4:  243:  if ( state->numActions < 1 )
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        3:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        3:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
        1:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        2:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        2:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        2:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        2:  269:  return 0;
        -:  270:}
        -:  271:
      104:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      104:  280:  who = state->whoseTurn;
        -:  281:
      104:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
       26:  285:    return -1;
       78:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       35:  289:    return -1;
       43:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       32:  293:    return -1;
        -:  294:  } else {
       11:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       11:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       11:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       11:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       11:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        3:  315:int handCard(int handPos, struct gameState *state) {
        3:  316:  int currentPlayer = whoseTurn(state);
        3:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       91:  320:int supplyCount(int card, struct gameState *state) {
       91:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    20009:  346:int whoseTurn(struct gameState *state) {
    20009:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        2:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        2:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++) {
    #####:  403:      if (state->supplyCount[i] == 0) {
    #####:  404:        j++;
        -:  405:      }
        -:  406:  }
    #####:  407:  if ( j >= 3)
        -:  408:    {
    #####:  409:      return 1;
        -:  410:    }
        -:  411:
    #####:  412:  return 0;
        -:  413:}
        -:  414:
    #####:  415:int scoreFor (int player, struct gameState *state) {
        -:  416:
        -:  417:  int i;
    #####:  418:  int score = 0;
        -:  419:  //score from hand
    #####:  420:  for (i = 0; i < state->handCount[player]; i++)
        -:  421:    {
    #####:  422:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  423:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  424:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  425:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  426:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  428:    }
        -:  429:
        -:  430:  //score from discard
    #####:  431:  for (i = 0; i < state->discardCount[player]; i++)
        -:  432:    {
    #####:  433:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  434:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  435:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  436:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  437:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  439:    }
        -:  440:
        -:  441:  //score from deck
    #####:  442:  for (i = 0; i < state->discardCount[player]; i++)
        -:  443:    {
    #####:  444:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  445:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  446:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  447:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  448:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  450:    }
        -:  451:
    #####:  452:  return score;
        -:  453:}
        -:  454:
    #####:  455:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  456:  int i;	
        -:  457:  int j;
        -:  458:  int highScore;
        -:  459:  int currentPlayer;
        -:  460:
        -:  461:  //get score for each player
    #####:  462:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  463:    {
        -:  464:      //set unused player scores to -9999
    #####:  465:      if (i >= state->numPlayers)
        -:  466:	{
    #####:  467:	  players[i] = -9999;
        -:  468:	}
        -:  469:      else
        -:  470:	{
    #####:  471:	  players[i] = scoreFor (i, state);
        -:  472:	}
        -:  473:    }
        -:  474:
        -:  475:  //find highest score
    #####:  476:  j = 0;
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
    #####:  479:      if (players[i] > players[j])
        -:  480:	{
    #####:  481:	  j = i;
        -:  482:	}
        -:  483:    }
    #####:  484:  highScore = players[j];
        -:  485:
        -:  486:  //add 1 to players who had less turns
    #####:  487:  currentPlayer = whoseTurn(state);
    #####:  488:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  489:    {
    #####:  490:      if ( players[i] == highScore && i > currentPlayer )
        -:  491:	{
    #####:  492:	  players[i]++;
        -:  493:	}
        -:  494:    }
        -:  495:
        -:  496:  //find new highest score
    #####:  497:  j = 0;
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  499:    {
    #####:  500:      if ( players[i] > players[j] )
        -:  501:	{
    #####:  502:	  j = i;
        -:  503:	}
        -:  504:    }
    #####:  505:  highScore = players[j];
        -:  506:
        -:  507:  //set winners in array to 1 and rest to 0
    #####:  508:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  509:    {
    #####:  510:      if ( players[i] == highScore )
        -:  511:	{
    #####:  512:	  players[i] = 1;
        -:  513:	}
        -:  514:      else
        -:  515:	{
    #####:  516:	  players[i] = 0;
        -:  517:	}
        -:  518:    }
        -:  519:
    #####:  520:  return 0;
        -:  521:}
        -:  522:
  5297265:  523:int drawCard(int player, struct gameState *state)
        -:  524:{	int count;
        -:  525:  int deckCounter;
  5297265:  526:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  527:    
        -:  528:    //Step 1 Shuffle the discard pile back into a deck
        -:  529:    int i;
        -:  530:    //Move discard to deck
      484:  531:    for (i = 0; i < state->discardCount[player];i++){
    #####:  532:      state->deck[player][i] = state->discard[player][i];
    #####:  533:      state->discard[player][i] = -1;
        -:  534:    }
        -:  535:
      484:  536:    state->deckCount[player] = state->discardCount[player];
      484:  537:    state->discardCount[player] = 0;//Reset discard
        -:  538:
        -:  539:    //Shufffle the deck
      484:  540:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  541:   
        -:  542:    if (DEBUG){//Debug statements
        -:  543:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  544:    }
        -:  545:    
      484:  546:    state->discardCount[player] = 0;
        -:  547:
        -:  548:    //Step 2 Draw Card
      484:  549:    count = state->handCount[player];//Get current player's hand count
        -:  550:    
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Current hand count: %d\n", count);
        -:  553:    }
        -:  554:    
      484:  555:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  556:
      484:  557:    if (deckCounter == 0)
      484:  558:      return -1;
        -:  559:
    #####:  560:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  561:    state->deckCount[player]--;
    #####:  562:    state->handCount[player]++;//Increment hand count
        -:  563:  }
        -:  564:
        -:  565:  else{
  5296781:  566:    int count = state->handCount[player];//Get current hand count for player
        -:  567:    int deckCounter;
        -:  568:    if (DEBUG){//Debug statements
        -:  569:      printf("Current hand count: %d\n", count);
        -:  570:    }
        -:  571:
  5296781:  572:    deckCounter = state->deckCount[player];//Create holder for the deck count
  5296781:  573:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  5296781:  574:    state->deckCount[player]--;
  5296781:  575:    state->handCount[player]++;//Increment hand count
        -:  576:  }
        -:  577:
  5296781:  578:  return 0;
        -:  579:}
        -:  580:
       55:  581:int getCost(int cardNumber)
        -:  582:{
       55:  583:  switch( cardNumber ) 
        -:  584:    {
        -:  585:    case curse:
        4:  586:      return 0;
        -:  587:    case estate:
        3:  588:      return 2;
        -:  589:    case duchy:
        2:  590:      return 5;
        -:  591:    case province:
        2:  592:      return 8;
        -:  593:    case copper:
        4:  594:      return 0;
        -:  595:    case silver:
        3:  596:      return 3;
        -:  597:    case gold:
        2:  598:      return 6;
        -:  599:    case adventurer:
        2:  600:      return 6;
        -:  601:    case council_room:
        2:  602:      return 5;
        -:  603:    case feast:
        1:  604:      return 4;
        -:  605:    case gardens:
        1:  606:      return 4;
        -:  607:    case mine:
        2:  608:      return 5;
        -:  609:    case remodel:
        1:  610:      return 4;
        -:  611:    case smithy:
        3:  612:      return 4;
        -:  613:    case village:
        4:  614:      return 3;
        -:  615:    case baron:
        1:  616:      return 4;
        -:  617:    case great_hall:
        1:  618:      return 3;
        -:  619:    case minion:
        2:  620:      return 5;
        -:  621:    case steward:
        1:  622:      return 3;
        -:  623:    case tribute:
        2:  624:      return 5;
        -:  625:    case ambassador:
        1:  626:      return 3;
        -:  627:    case cutpurse:
        3:  628:      return 4;
        -:  629:    case embargo: 
        3:  630:      return 2;
        -:  631:    case outpost:
        1:  632:      return 5;
        -:  633:    case salvager:
        1:  634:      return 4;
        -:  635:    case sea_hag:
        3:  636:      return 4;
        -:  637:    case treasure_map:
    #####:  638:      return 4;
        -:  639:    }
        -:  640:	
    #####:  641:  return -1;
        -:  642:}
        -:  643:
    20003:  644:int smithyEffect(struct gameState *state, int handPos, int currentPlayer) {
        -:  645:  int i;
        -:  646:  //+3 Cards
        -:  647:  // bug: add +4 instead of 3
   100015:  648:  for (i = 0; i < 4; i++) {
    80012:  649:	  drawCard(currentPlayer, state);
        -:  650:	}
        -:  651:  //discard card from hand
    20003:  652:  discardCard(handPos, currentPlayer, state, 0);
    20003:  653:  return 0;
        -:  654:}
        -:  655:
    20001:  656:int adventurerEffect(struct gameState *state, int currentPlayer, int drawntreasure, int z, int cardDrawn, int temphand[]) {
        -:  657:  // bug: drawntreasure should only be 2, instead it's 3
  4943775:  658:  while(drawntreasure<3){
  4903773:  659:    if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
      470:  660:      shuffle(currentPlayer, state);
        -:  661:    }
  4903773:  662:    drawCard(currentPlayer, state);
  4903773:  663:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  4903773:  664:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    60003:  665:      drawntreasure++;
        -:  666:    else {
  4843770:  667:      temphand[z]=cardDrawn;
  4843770:  668:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  4843770:  669:      z++;
        -:  670:    }
        -:  671:  }
  4883772:  672:  while(z-1>=0){
  4843770:  673:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  4843770:  674:    z=z-1;
        -:  675:  }
    20001:  676:  return 0;
        -:  677:}
        -:  678:
        1:  679:int feastEffect(struct gameState *state, int currentPlayer, int *temphand, int choice1) {
        -:  680:  int i;
        -:  681:  int x;
        -:  682:  //gain card with cost up to 5
        -:  683:  //Backup hand
        7:  684:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  685:    temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  686:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  687:  }
        -:  688:  //Backup hand
        -:  689:  //Update Coins for Buy
        -:  690:  // bug: feast should give 5 coins, instead giving 3
        1:  691:  updateCoins(currentPlayer, state, 3);
        1:  692:  x = 1;//Condition to loop on
        3:  693:  while( x == 1) { //Buy one card
        1:  694:    if (supplyCount(choice1, state) <= 0){
        -:  695:      // BUG FOUND:
        -:  696:      // will loop infinitely if card not in supply
        -:  697:      if (DEBUG)
        -:  698:        printf("None of that card left, sorry!\n");
        -:  699:
        -:  700:      if (DEBUG) {
        -:  701:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  702:      }
        1:  703:    } else if (state->coins < getCost(choice1)){
        -:  704:      // BUG FOUND:
        -:  705:      // will loop infinitely if card too expensive
    #####:  706:      printf("That card is too expensive!\n");
        -:  707:      if (DEBUG){
        -:  708:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  709:      }
        -:  710:    } else {
        -:  711:      if (DEBUG){
        -:  712:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  713:      }
        -:  714:      // BUG FOUND:
        -:  715:      // Invalid flag being passed, card is being discarded
        1:  716:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  717:      x = 0;//No more buying cards
        -:  718:      if (DEBUG){
        -:  719:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  720:      }
        -:  721:    }
        -:  722:  }     
        -:  723:  //Reset Hand
        7:  724:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  725:    state->hand[currentPlayer][i] = temphand[i];
        6:  726:    temphand[i] = -1;
        -:  727:  }
        1:  728:  return 0;
        -:  729:}
        -:  730:
        1:  731:int council_roomEffect(struct gameState *state, int currentPlayer, int handPos) {
        -:  732:  int i;
        -:  733:  //+4 Cards
        -:  734:  // bug: should be 4, instead is 3
        4:  735:  for (i = 0; i < 3; i++) {
        3:  736:    drawCard(currentPlayer, state);
        -:  737:  }
        -:  738:  //+1 Buy
        1:  739:  state->numBuys++;
        -:  740:  //Each other player draws a card
        3:  741:  for (i = 0; i < state->numPlayers; i++) {
        2:  742:    if ( i != currentPlayer ) {
        1:  743:      drawCard(i, state);
        -:  744:    }
        -:  745:  }
        -:  746:  //put played card in played card pile
        1:  747:  discardCard(handPos, currentPlayer, state, 0);
        1:  748:  return 0;
        -:  749:}
        -:  750:
    #####:  751:int mineEffect(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -:  752:  int j;
        -:  753:  int i;
    #####:  754:  j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  755:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####:  756:    return -1;
        -:  757:  }   
    #####:  758:  if (choice2 > treasure_map || choice2 < curse) {
    #####:  759:    return -1;
        -:  760:  }
    #####:  761:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
    #####:  762:    return -1;
        -:  763:  }
    #####:  764:  gainCard(choice2, state, 2, currentPlayer);
        -:  765:  //discard card from hand
    #####:  766:  discardCard(handPos, currentPlayer, state, 0);
        -:  767:  //discard trashed card
    #####:  768:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  769:    if (state->hand[currentPlayer][i] == j) {
    #####:  770:      discardCard(i, currentPlayer, state, 0);			
    #####:  771:      break;
        -:  772:    }
        -:  773:  }
    #####:  774:  return 0;
        -:  775:}
        -:  776:
    20006:  777:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  778:{
        -:  779:  int i;
        -:  780:  int j;
        -:  781:  int k;
        -:  782:  int x;
        -:  783:  int index;
    20006:  784:  int currentPlayer = whoseTurn(state);
    20006:  785:  int nextPlayer = currentPlayer + 1;
        -:  786:
    20006:  787:  int tributeRevealedCards[2] = {-1, -1};
        -:  788:  int temphand[MAX_HAND];// moved above the if statement
    20006:  789:  int drawntreasure=0;
    20006:  790:  int cardDrawn = 0;
    20006:  791:  int z = 0;// this is the counter for the temp hand
    20006:  792:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  793:    nextPlayer = 0;
        -:  794:  }
        -:  795:  
        -:  796:	
        -:  797:  //uses switch to select card and perform actions
    20006:  798:  switch( card ) 
        -:  799:    {
        -:  800:    case adventurer:
        1:  801:			return adventurerEffect(state, currentPlayer, drawntreasure, z, cardDrawn, temphand);
        -:  802:    case council_room:
        1:  803:      return council_roomEffect(state, currentPlayer, handPos);
        -:  804:			
        -:  805:    case feast:
        1:  806:      return feastEffect(state, currentPlayer, temphand, choice1);
        -:  807:			
        -:  808:    case gardens:
    #####:  809:      return -1;
        -:  810:			
        -:  811:    case mine:
    #####:  812:      return mineEffect(state, currentPlayer, choice1, choice2, handPos);
        -:  813:			
        -:  814:    case remodel:
    #####:  815:      j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  816:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
    #####:  817:        return -1;
        -:  818:      }
    #####:  819:      gainCard(choice2, state, 0, currentPlayer);
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
        -:  822:      //discard trashed card
    #####:  823:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  824:        if (state->hand[currentPlayer][i] == j) {
    #####:  825:          discardCard(i, currentPlayer, state, 0);			
    #####:  826:          break;
        -:  827:        }
        -:  828:      }
    #####:  829:      return 0;
        -:  830:		
        -:  831:    case smithy:
        3:  832:      return smithyEffect(state, handPos, currentPlayer);
        -:  833:		
        -:  834:    case village:
        -:  835:      //+1 Card
    #####:  836:      drawCard(currentPlayer, state);
        -:  837:			
        -:  838:      //+2 Actions
    #####:  839:      state->numActions = state->numActions + 2;
        -:  840:			
        -:  841:      //discard played card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
    #####:  843:      return 0;
        -:  844:		
        -:  845:    case baron:
    #####:  846:      state->numBuys++;//Increase buys by 1!
    #####:  847:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  848:	int p = 0;//Iterator for hand!
    #####:  849:	int card_not_discarded = 1;//Flag for discard set!
    #####:  850:	while(card_not_discarded){
    #####:  851:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  852:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  853:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  854:	    state->discardCount[currentPlayer]++;
    #####:  855:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  856:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  857:	    }
    #####:  858:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  859:	    state->handCount[currentPlayer]--;
    #####:  860:	    card_not_discarded = 0;//Exit the loop
        -:  861:	  }
    #####:  862:	  else if (p > state->handCount[currentPlayer]){
        -:  863:	    if(DEBUG) {
        -:  864:	      printf("No estate cards in your hand, invalid choice\n");
        -:  865:	      printf("Must gain an estate if there are any\n");
        -:  866:	    }
    #####:  867:	    if (supplyCount(estate, state) > 0){
    #####:  868:	      gainCard(estate, state, 0, currentPlayer);
    #####:  869:	      state->supplyCount[estate]--;//Decrement estates
    #####:  870:	      if (supplyCount(estate, state) == 0){
    #####:  871:		isGameOver(state);
        -:  872:	      }
        -:  873:	    }
    #####:  874:	    card_not_discarded = 0;//Exit the loop
        -:  875:	  }
        -:  876:			    
        -:  877:	  else{
    #####:  878:	    p++;//Next card
        -:  879:	  }
        -:  880:	}
        -:  881:      }
        -:  882:			    
        -:  883:      else{
    #####:  884:	if (supplyCount(estate, state) > 0){
    #####:  885:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  886:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  887:	  if (supplyCount(estate, state) == 0){
    #####:  888:	    isGameOver(state);
        -:  889:	  }
        -:  890:	}
        -:  891:      }
        -:  892:	    
        -:  893:      
    #####:  894:      return 0;
        -:  895:		
        -:  896:    case great_hall:
        -:  897:      //+1 Card
    #####:  898:      drawCard(currentPlayer, state);
        -:  899:			
        -:  900:      //+1 Actions
    #####:  901:      state->numActions++;
        -:  902:			
        -:  903:      //discard card from hand
    #####:  904:      discardCard(handPos, currentPlayer, state, 0);
    #####:  905:      return 0;
        -:  906:		
        -:  907:    case minion:
        -:  908:      //+1 action
    #####:  909:      state->numActions++;
        -:  910:			
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
        -:  913:			
    #####:  914:      if (choice1)		//+2 coins
        -:  915:	{
    #####:  916:	  state->coins = state->coins + 2;
        -:  917:	}
        -:  918:			
    #####:  919:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  920:	{
        -:  921:	  //discard hand
    #####:  922:	  while(numHandCards(state) > 0)
        -:  923:	    {
    #####:  924:	      discardCard(handPos, currentPlayer, state, 0);
        -:  925:	    }
        -:  926:				
        -:  927:	  //draw 4
    #####:  928:	  for (i = 0; i < 4; i++)
        -:  929:	    {
    #####:  930:	      drawCard(currentPlayer, state);
        -:  931:	    }
        -:  932:				
        -:  933:	  //other players discard hand and redraw if hand size > 4
    #####:  934:	  for (i = 0; i < state->numPlayers; i++)
        -:  935:	    {
    #####:  936:	      if (i != currentPlayer)
        -:  937:		{
    #####:  938:		  if ( state->handCount[i] > 4 )
        -:  939:		    {
        -:  940:		      //discard hand
    #####:  941:		      while( state->handCount[i] > 0 )
        -:  942:			{
    #####:  943:			  discardCard(handPos, i, state, 0);
        -:  944:			}
        -:  945:							
        -:  946:		      //draw 4
    #####:  947:		      for (j = 0; j < 4; j++)
        -:  948:			{
    #####:  949:			  drawCard(i, state);
        -:  950:			}
        -:  951:		    }
        -:  952:		}
        -:  953:	    }
        -:  954:				
        -:  955:	}
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case steward:
    20000:  959:      if (choice1 == 1)
        -:  960:	{
        -:  961:	  //+2 cards
     6718:  962:	  drawCard(currentPlayer, state);
     6718:  963:	  drawCard(currentPlayer, state);
        -:  964:	}
    13282:  965:      else if (choice1 == 2)
        -:  966:	{
        -:  967:	  //+2 coins
     6631:  968:	  state->coins = state->coins + 2;
        -:  969:	}
        -:  970:      else
        -:  971:	{
        -:  972:	  //trash 2 cards in hand
     6651:  973:	  discardCard(choice2, currentPlayer, state, 1);
     6651:  974:	  discardCard(choice3, currentPlayer, state, 1);
        -:  975:	}
        -:  976:			
        -:  977:      //discard card from hand
    20000:  978:      discardCard(handPos, currentPlayer, state, 0);
    20000:  979:      return 0;
        -:  980:		
        -:  981:    case tribute:
    #####:  982:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  983:	if (state->deckCount[nextPlayer] > 0){
    #####:  984:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  985:	  state->deckCount[nextPlayer]--;
        -:  986:	}
    #####:  987:	else if (state->discardCount[nextPlayer] > 0){
    #####:  988:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  989:	  state->discardCount[nextPlayer]--;
        -:  990:	}
        -:  991:	else{
        -:  992:	  //No Card to Reveal
        -:  993:	  if (DEBUG){
        -:  994:	    printf("No cards to reveal\n");
        -:  995:	  }
        -:  996:	}
        -:  997:      }
        -:  998:	    
        -:  999:      else{
    #####: 1000:	if (state->deckCount[nextPlayer] == 0){
    #####: 1001:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1002:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1003:	    state->deckCount[nextPlayer]++;
    #####: 1004:	    state->discard[nextPlayer][i] = -1;
    #####: 1005:	    state->discardCount[nextPlayer]--;
        -: 1006:	  }
        -: 1007:			    
    #####: 1008:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1009:	} 
    #####: 1010:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1011:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1012:	state->deckCount[nextPlayer]--;
    #####: 1013:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1014:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1015:	state->deckCount[nextPlayer]--;
        -: 1016:      }    
        -: 1017:		       
    #####: 1018:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1019:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1020:	state->playedCardCount++;
    #####: 1021:	tributeRevealedCards[1] = -1;
        -: 1022:      }
        -: 1023:
    #####: 1024:      for (i = 0; i <= 2; i ++){
    #####: 1025:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1026:	  state->coins += 2;
        -: 1027:	}
        -: 1028:		    
    #####: 1029:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1030:	  drawCard(currentPlayer, state);
    #####: 1031:	  drawCard(currentPlayer, state);
        -: 1032:	}
        -: 1033:	else{//Action Card
    #####: 1034:	  state->numActions = state->numActions + 2;
        -: 1035:	}
        -: 1036:      }
        -: 1037:	    
    #####: 1038:      return 0;
        -: 1039:		
        -: 1040:    case ambassador:
    #####: 1041:      j = 0;		//used to check if player has enough cards to discard
        -: 1042:
    #####: 1043:      if (choice2 > 2 || choice2 < 0)
        -: 1044:	{
    #####: 1045:	  return -1;				
        -: 1046:	}
        -: 1047:
    #####: 1048:      if (choice1 == handPos)
        -: 1049:	{
    #####: 1050:	  return -1;
        -: 1051:	}
        -: 1052:
    #####: 1053:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1054:	{
    #####: 1055:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1056:	    {
    #####: 1057:	      j++;
        -: 1058:	    }
        -: 1059:	}
    #####: 1060:      if (j < choice2)
        -: 1061:	{
    #####: 1062:	  return -1;				
        -: 1063:	}
        -: 1064:
        -: 1065:      if (DEBUG) 
        -: 1066:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1067:
        -: 1068:      //increase supply count for choosen card by amount being discarded
    #####: 1069:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1070:			
        -: 1071:      //each other player gains a copy of revealed card
    #####: 1072:      for (i = 0; i < state->numPlayers; i++)
        -: 1073:	{
    #####: 1074:	  if (i != currentPlayer)
        -: 1075:	    {
    #####: 1076:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1077:	    }
        -: 1078:	}
        -: 1079:
        -: 1080:      //discard played card from hand
    #####: 1081:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1082:
        -: 1083:      //trash copies of cards returned to supply
    #####: 1084:      for (j = 0; j < choice2; j++)
        -: 1085:	{
    #####: 1086:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1087:	    {
    #####: 1088:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1089:		{
    #####: 1090:		  discardCard(i, currentPlayer, state, 1);
    #####: 1091:		  break;
        -: 1092:		}
        -: 1093:	    }
        -: 1094:	}			
        -: 1095:
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case cutpurse:
        -: 1099:
    #####: 1100:      updateCoins(currentPlayer, state, 2);
    #####: 1101:      for (i = 0; i < state->numPlayers; i++)
        -: 1102:	{
    #####: 1103:	  if (i != currentPlayer)
        -: 1104:	    {
    #####: 1105:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1106:		{
    #####: 1107:		  if (state->hand[i][j] == copper)
        -: 1108:		    {
    #####: 1109:		      discardCard(j, i, state, 0);
    #####: 1110:		      break;
        -: 1111:		    }
    #####: 1112:		  if (j == state->handCount[i])
        -: 1113:		    {
    #####: 1114:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1115:			{
        -: 1116:			  if (DEBUG)
        -: 1117:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1118:			}	
    #####: 1119:		      break;
        -: 1120:		    }		
        -: 1121:		}
        -: 1122:					
        -: 1123:	    }
        -: 1124:				
        -: 1125:	}				
        -: 1126:
        -: 1127:      //discard played card from hand
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1129:
    #####: 1130:      return 0;
        -: 1131:
        -: 1132:		
        -: 1133:    case embargo: 
        -: 1134:      //+2 Coins
    #####: 1135:      state->coins = state->coins + 2;
        -: 1136:			
        -: 1137:      //see if selected pile is in play
    #####: 1138:      if ( state->supplyCount[choice1] == -1 )
        -: 1139:	{
    #####: 1140:	  return -1;
        -: 1141:	}
        -: 1142:			
        -: 1143:      //add embargo token to selected supply pile
    #####: 1144:      state->embargoTokens[choice1]++;
        -: 1145:			
        -: 1146:      //trash card
    #####: 1147:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1148:      return 0;
        -: 1149:		
        -: 1150:    case outpost:
        -: 1151:      //set outpost flag
    #####: 1152:      state->outpostPlayed++;
        -: 1153:			
        -: 1154:      //discard card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case salvager:
        -: 1159:      //+1 buy
    #####: 1160:      state->numBuys++;
        -: 1161:			
    #####: 1162:      if (choice1)
        -: 1163:	{
        -: 1164:	  //gain coins equal to trashed card
    #####: 1165:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1166:	  //trash card
    #####: 1167:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1168:	}
        -: 1169:			
        -: 1170:      //discard card
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1172:      return 0;
        -: 1173:		
        -: 1174:    case sea_hag:
    #####: 1175:      for (i = 0; i < state->numPlayers; i++){
    #####: 1176:	if (i != currentPlayer){
    #####: 1177:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1178:	  state->discardCount[i]++;
    #####: 1179:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1180:	}
        -: 1181:      }
    #####: 1182:      return 0;
        -: 1183:		
        -: 1184:    case treasure_map:
        -: 1185:      //search hand for another treasure_map
    #####: 1186:      index = -1;
    #####: 1187:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1188:	{
    #####: 1189:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1190:	    {
    #####: 1191:	      index = i;
    #####: 1192:	      break;
        -: 1193:	    }
        -: 1194:	}
    #####: 1195:      if (index > -1)
        -: 1196:	{
        -: 1197:	  //trash both treasure cards
    #####: 1198:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1199:	  discardCard(index, currentPlayer, state, 1);
        -: 1200:
        -: 1201:	  //gain 4 Gold cards
    #####: 1202:	  for (i = 0; i < 4; i++)
        -: 1203:	    {
    #####: 1204:	      gainCard(gold, state, 1, currentPlayer);
        -: 1205:	    }
        -: 1206:				
        -: 1207:	  //return success
    #####: 1208:	  return 1;
        -: 1209:	}
        -: 1210:			
        -: 1211:      //no second treasure_map found in hand
    #####: 1212:      return -1;
        -: 1213:    }
        -: 1214:	
    #####: 1215:  return -1;
        -: 1216:}
        -: 1217:
    53306: 1218:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1219:  //if card is not trashed, added to Played pile 
    53306: 1220:  if (trashFlag < 1) {
        -: 1221:    //add card to played pile
    40004: 1222:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    40004: 1223:    state->playedCardCount++;
        -: 1224:  }
        -: 1225:  //set played card to -1
    53306: 1226:  state->hand[currentPlayer][handPos] = -1;
        -: 1227:  //remove card from player's hand
    53306: 1228:  if ( handPos == (state->handCount[currentPlayer] - 1) ) { //last card in hand array is played
        -: 1229:    //reduce number of cards in hand
      324: 1230:    state->handCount[currentPlayer]--;
    52982: 1231:  } else if ( state->handCount[currentPlayer] == 1 ) { //only one card in hand
        -: 1232:    //reduce number of cards in hand
       19: 1233:    state->handCount[currentPlayer]--;
        -: 1234:  } else {
        -: 1235:    //replace discarded card with last card in hand
    52963: 1236:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1237:    //set last card to -1
    52963: 1238:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1239:    //reduce number of cards in hand
    52963: 1240:    state->handCount[currentPlayer]--;
        -: 1241:  }
    53306: 1242:  return 0;
        -: 1243:}
        -: 1244:
       12: 1245:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1246:{
        -: 1247:  //Note: supplyPos is enum of choosen card
        -: 1248:	
        -: 1249:  //check if supply pile is empty (0) or card is not used in game (-1)
       12: 1250:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1251:    {
    #####: 1252:      return -1;
        -: 1253:    }
        -: 1254:	
        -: 1255:  //added card for [whoseTurn] current player:
        -: 1256:  // toFlag = 0 : add to discard
        -: 1257:  // toFlag = 1 : add to deck
        -: 1258:  // toFlag = 2 : add to hand
        -: 1259:
       12: 1260:  if (toFlag == 1)
        -: 1261:    {
    #####: 1262:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1263:      state->deckCount[player]++;
        -: 1264:    }
       12: 1265:  else if (toFlag == 2)
        -: 1266:    {
    #####: 1267:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1268:      state->handCount[player]++;
        -: 1269:    }
        -: 1270:  else
        -: 1271:    {
       12: 1272:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       12: 1273:      state->discardCount[player]++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //decrease number in supply pile
       12: 1277:  state->supplyCount[supplyPos]--;
        -: 1278:	 
       12: 1279:  return 0;
        -: 1280:}
        -: 1281:
    60011: 1282:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1283:{
        -: 1284:  int i;
        -: 1285:	
        -: 1286:  //reset coin count
    60011: 1287:  state->coins = 0;
        -: 1288:
        -: 1289:  //add coins for each Treasure card in player's hand
   360072: 1290:  for (i = 0; i < state->handCount[player]; i++)
        -: 1291:    {
   300061: 1292:      if (state->hand[player][i] == copper)
        -: 1293:	{
   210077: 1294:	  state->coins += 1;
        -: 1295:	}
    89984: 1296:      else if (state->hand[player][i] == silver)
        -: 1297:	{
        2: 1298:	  state->coins += 2;
        -: 1299:	}
    89982: 1300:      else if (state->hand[player][i] == gold)
        -: 1301:	{
        2: 1302:	  state->coins += 3;
        -: 1303:	}	
        -: 1304:    }	
        -: 1305:
        -: 1306:  //add bonus
    60011: 1307:  state->coins += bonus;
        -: 1308:
    60011: 1309:  return 0;
        -: 1310:}
        -: 1311:
        -: 1312:
        -: 1313://end of dominion.c
        -: 1314:
