        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <time.h>
        -:    9:
        -:   10:
function checkSmithy called 20000 returned 100% blocks executed 83%
    20000:   11:int checkSmithy(int currentPlayer, struct gameState *post, int handPos, int seed, int initialHandCount) {
        -:   12:
    20000:   13:	int result = smithyCard(currentPlayer, post, handPos);
call    0 returned 100%
    20000:   14:	assert(result == 0 && "Failed to execute");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   15:
    20000:   16:	if (post->handCount[currentPlayer] != initialHandCount + 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    20000:   17:		printf("Seed: %d, test failed.\n", seed);
call    0 returned 100%
        -:   18:	}
        -:   19:	//assert(post->handCount[currentPlayer] == initialHandCount + 2);
    20000:   20:}
function main called 1 returned 100% blocks executed 100%
        1:   21:int main() {
        1:   22:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   23:	int n, seed;
        1:   24:	int thisPlayer = 0;
        1:   25:	int numTests = 20000;
        1:   26:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   27:		sea_hag, tribute, smithy };
        -:   28:	
        1:   29:	printf("Testing Smithy...\n");
call    0 returned 100%
        -:   30:	struct gameState G;
        -:   31:	
        -:   32:	//initializeGame(2, k, 10, &G);
        -:   33:	//memcpy(&testG, &G, sizeof(struct gameState));
        -:   34:
    20001:   35:	for (n = 0; n < numTests; n++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    20000:   36:		seed = rand() % RAND_MAX;
call    0 returned 100%
    20000:   37:		initializeGame(2, k, seed, &G);
call    0 returned 100%
    20000:   38:		int smithyPos = rand() % G.handCount[thisPlayer];
call    0 returned 100%
    20000:   39:		G.hand[thisPlayer][smithyPos] = smithy;
    20000:   40:		checkSmithy(thisPlayer, &G, smithyPos, seed, G.handCount[thisPlayer]);
call    0 returned 100%
        -:   41:		
        -:   42:	}
        1:   43:	printf("%d Tests complete. Unsuccessful tests shown above.", numTests);
call    0 returned 100%
        1:   44:	return 0;
        -:   45:}
