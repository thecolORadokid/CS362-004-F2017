        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
function main called 1 returned 100% blocks executed 79%
        1:    9:int main() {
        1:   10:	int handpos = 0, bonus = 0;
        1:   11:	int seed = 1000;
        1:   12:	int numPlayers = 2;
        1:   13:	int thisPlayer = 0;
        -:   14:	struct gameState G, testG;
        1:   15:	int k[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   16:		sea_hag, tribute, smithy, council_room };
        1:   17:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        1:   18:	printf("Testing Mine Card...\n");
call    0 returned 100%
        -:   19:	/* choice1 is hand# of money to trash, choice2 is supply# of money to put in hand */
        1:   20:	printf("Testing choice 2 = copper...\n\n");
call    0 returned 100%
        1:   21:	int trashCount = 0;
        5:   22:	for (int i = 1; i < G.handCount[thisPlayer]; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   23:		int choice2 = copper;
        4:   24:		G.hand[thisPlayer][0] = mine;
        4:   25:		G.hand[thisPlayer][1] = copper;
        4:   26:		G.hand[thisPlayer][2] = silver;
        4:   27:		G.hand[thisPlayer][3] = gold;
        4:   28:		G.hand[thisPlayer][4] = estate;
        4:   29:		int initialHandCount = G.handCount[thisPlayer];
        4:   30:		memcpy(&testG, &G, sizeof(struct gameState));
        4:   31:		int result = cardEffect(mine, i, choice2, 0, &testG, handpos, &bonus);
call    0 returned 100%
        -:   32:		//printf("Treasure to discard: %d\n Supply Choice: %d\n\n", testG.hand[thisPlayer][i], choice2);
        4:   33:		if (result == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   34:			trashCount++;
    #####:   35:			printf("%d trashed for %d\n", i, choice2);
call    0 never executed
    #####:   36:			printf("Final Hand Count: %d\n", testG.handCount[thisPlayer]);
call    0 never executed
    #####:   37:			printf("Hand contains: ");
call    0 never executed
    #####:   38:			for (int j = 0; j < testG.handCount[thisPlayer]; j++) {
branch  0 never executed
branch  1 never executed
    #####:   39:				printf("%d ,", testG.hand[thisPlayer][j]);
call    0 never executed
        -:   40:			}
        -:   41:			/*printf("Final Hand Count: %d\n", testG.handCount[thisPlayer]);
        -:   42:			printf("Hand contains: ");
        -:   43:				for (int j = 0; j < testG.handCount[thisPlayer]; j++) {
        -:   44:				printf("%d ,", testG.hand[thisPlayer][j]);*/
        -:   45:		}
        -:   46:	}
        1:   47:	if (trashCount == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   48:		printf("Test PASSED. No exchange for copper.\n");
call    0 returned 100%
        -:   49:	}
        -:   50:	else {
    #####:   51:		printf("Test FAILED. Shouldn't have exchanged for copper.\n");
call    0 never executed
        -:   52:	}
        1:   53:	if (testG.handCount[thisPlayer] != 4) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   54:		printf("Test FAILED. Incorrect number of cards in hand.\n\n");
call    0 returned 100%
        -:   55:	}
        -:   56:	else {
    #####:   57:		printf("Test PASSED. Correct number of cards in hand.\n\n");
call    0 never executed
        -:   58:	}
        1:   59:	printf("Testing choice 2 = silver...\n\n");
call    0 returned 100%
        1:   60:	trashCount = 0;
        5:   61:	for(int i = 1; i < G.handCount[thisPlayer]; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   62:		int choice2 = silver;
        4:   63:		G.hand[thisPlayer][0] = mine;
        4:   64:		G.hand[thisPlayer][1] = copper;
        4:   65:		G.hand[thisPlayer][2] = silver;
        4:   66:		G.hand[thisPlayer][3] = gold;
        4:   67:		G.hand[thisPlayer][4] = estate;
        4:   68:		int initialHandCount = G.handCount[thisPlayer];
        4:   69:		memcpy(&testG, &G, sizeof(struct gameState));
        4:   70:		int result = cardEffect(mine, i, choice2, 0, &testG, handpos, &bonus);
call    0 returned 100%
        4:   71:		if (result == 0) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:   72:			trashCount++;
        1:   73:			printf("%d trashed for %d\n", G.hand[thisPlayer][i], choice2);
call    0 returned 100%
        1:   74:			printf("Final Hand Count: %d\n", testG.handCount[thisPlayer]);
call    0 returned 100%
        1:   75:			printf("Hand contains: ");
call    0 returned 100%
        6:   76:			for (int j = 0; j < testG.handCount[thisPlayer]; j++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   77:				printf("%d ,", testG.hand[thisPlayer][j]);
call    0 returned 100%
        -:   78:			}
        -:   79:		}
        4:   80:		printf("\n");
call    0 returned 100%
        -:   81:	}
        1:   82:	if (trashCount == 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   83:		printf("Test PASSED. Copper for silver.\n");
call    0 returned 100%
        -:   84:	}
        -:   85:	else {
    #####:   86:		printf("Test FAILED. Incorrect number of exchanges.\n");
call    0 never executed
        -:   87:	}
        1:   88:	if (testG.handCount[thisPlayer] != 4) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   89:		printf("Test FAILED. Incorrect number of cards in hand.\n\n");
call    0 returned 100%
        -:   90:	}
        -:   91:	else {
    #####:   92:		printf("Test PASSED. Correct number of cards in hand.\n\n");
call    0 never executed
        -:   93:	}
        1:   94:	printf("\nTesting choice 2 = gold...\n\n");
call    0 returned 100%
        1:   95:	trashCount = 0;
        5:   96:	for (int i = 1; i < G.handCount[thisPlayer]; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   97:		int choice2 = gold;
        4:   98:		G.hand[thisPlayer][0] = mine;
        4:   99:		G.hand[thisPlayer][1] = copper;
        4:  100:		G.hand[thisPlayer][2] = silver;
        4:  101:		G.hand[thisPlayer][3] = gold;
        4:  102:		G.hand[thisPlayer][4] = estate;
        4:  103:		int initialHandCount = G.handCount[thisPlayer];
        4:  104:		memcpy(&testG, &G, sizeof(struct gameState));
        4:  105:		int result = cardEffect(mine, i, choice2, 0, &testG, handpos, &bonus);
call    0 returned 100%
        4:  106:		if (result == 0) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  107:			trashCount++;
        2:  108:			printf("%d trashed for %d\n", G.hand[thisPlayer][i], choice2);
call    0 returned 100%
        2:  109:			printf("Final Hand Count: %d\n", testG.handCount[thisPlayer]);
call    0 returned 100%
        2:  110:			printf("Hand contains: ");
call    0 returned 100%
       12:  111:			for (int j = 0; j < testG.handCount[thisPlayer]; j++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  112:				printf("%d ,", testG.hand[thisPlayer][j]);
call    0 returned 100%
        -:  113:			}
        -:  114:		}
        4:  115:		printf("\n");
call    0 returned 100%
        -:  116:	}
        1:  117:	if (trashCount == 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  118:		printf("Test PASSED. Copper and silver for gold.\n");
call    0 returned 100%
        -:  119:	}
        -:  120:	else {
    #####:  121:		printf("Test FAILED. Incorrect number of exchanges.\n");
call    0 never executed
        -:  122:	}
        1:  123:	if (testG.handCount[thisPlayer] != 4) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  124:		printf("Test FAILED. Incorrect number of cards in hand.\n\n");
call    0 returned 100%
        -:  125:	}
        -:  126:	else {
    #####:  127:		printf("Test PASSED. Correct number of cards in hand.\n\n");
call    0 never executed
        -:  128:	}
        1:  129:	return 0;
        -:  130:}
