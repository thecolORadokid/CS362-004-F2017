        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  1800250:    8:int compare(const void* a, const void* b) {
  1800250:    9:  if (*(int*)a > *(int*)b)
        1:   10:    return 1;
  1800249:   11:  if (*(int*)a < *(int*)b)
   480067:   12:    return -1;
  1320182:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    60008:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    60008:   44:  SelectStream(1);
    60008:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    60008:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    60008:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   660088:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  6600880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  6000800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    60008:   73:  if (numPlayers == 2)
        -:   74:    {
    60008:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    60008:   87:  if (numPlayers == 2)
        -:   88:    {
    60008:   89:      state->supplyCount[estate] = 8;
    60008:   90:      state->supplyCount[duchy] = 8;
    60008:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    60008:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    60008:  102:  state->supplyCount[silver] = 40;
    60008:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  1260168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  9901320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  9301240:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   600080:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
   120002:  115:		  if (numPlayers == 2){ 
    60001:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   540079:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   600080:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  8701160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   180024:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
   120016:  140:      state->deckCount[i] = 0;
   480064:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
   360048:  143:	  state->deck[i][j] = estate;
   360048:  144:	  state->deckCount[i]++;
        -:  145:	}
   960128:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   840112:  148:	  state->deck[i][j] = copper;
   840112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   180024:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
   120016:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   180024:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   120016:  166:      state->handCount[i] = 0;
   120016:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1680224:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
  1620216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    60008:  182:  state->outpostPlayed = 0;
    60008:  183:  state->phase = 0;
    60008:  184:  state->numActions = 1;
    60008:  185:  state->numBuys = 1;
    60008:  186:  state->playedCardCount = 0;
    60008:  187:  state->whoseTurn = 0;
    60008:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   360048:  192:  for (it = 0; it < 5; it++){
   300040:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    60008:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    60008:  198:  return 0;
        -:  199:}
        -:  200:
   120531:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   120531:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   120531:  209:  if (state->deckCount[player] < 1)
      513:  210:    return -1;
   120018:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1440206:  214:  while (state->deckCount[player] > 0) {
  1200170:  215:    card = floor(Random() * state->deckCount[player]);
  1200170:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1200170:  217:    newDeckPos++;
  3899966:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
  2699796:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1200170:  221:    state->deckCount[player]--;
        -:  222:  }
  1320188:  223:  for (i = 0; i < newDeckPos; i++) {
  1200170:  224:    state->deck[player][i] = newDeck[i];
  1200170:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   120018:  228:  return 0;
        -:  229:}
        -:  230:
        5:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        5:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        5:  237:  if (state->phase != 0)
        -:  238:    {
        1:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        4:  243:  if ( state->numActions < 1 )
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        3:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        3:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
        1:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        2:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        2:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        2:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        2:  269:  return 0;
        -:  270:}
        -:  271:
      104:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      104:  280:  who = state->whoseTurn;
        -:  281:
      104:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
       26:  285:    return -1;
       78:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       35:  289:    return -1;
       43:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       32:  293:    return -1;
        -:  294:  } else {
       11:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       11:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       11:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       11:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       11:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        3:  315:int handCard(int handPos, struct gameState *state) {
        3:  316:  int currentPlayer = whoseTurn(state);
        3:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       92:  320:int supplyCount(int card, struct gameState *state) {
       92:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       47:  346:int whoseTurn(struct gameState *state) {
       47:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        2:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        2:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
  5223343:  525:int drawCard(int player, struct gameState *state){	
        -:  526:  int count;
        -:  527:  int deckCounter;
  5223343:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      262:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      262:  538:    state->deckCount[player] = state->discardCount[player];
      262:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      262:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      262:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      262:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      262:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      262:  559:    if (deckCounter == 0)
      262:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
  5223081:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  5223081:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  5223081:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  5223081:  576:    state->deckCount[player]--;
  5223081:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  5223081:  580:  return 0;
        -:  581:}
        -:  582:
       72:  583:int getCost(int cardNumber)
        -:  584:{
       72:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        4:  588:      return 0;
        -:  589:    case estate:
        3:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
        2:  594:      return 8;
        -:  595:    case copper:
       10:  596:      return 0;
        -:  597:    case silver:
        9:  598:      return 3;
        -:  599:    case gold:
        8:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        3:  630:      return 4;
        -:  631:    case embargo: 
        3:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        3:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    20003:  646:int smithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  647:	//+3 Cards
    80012:  648:	for (int i = 0; i < 3; i++)
        -:  649:	{
    60009:  650:		drawCard(currentPlayer, state);
        -:  651:	}
        -:  652:
        -:  653:	//discard card from hand
        -:  654:	//discardCard(handPos, currentPlayer, state, 0); THIS IS AN INTRODUCED BUG 
    20003:  655:	return 0;
        -:  656:
        -:  657:}
        -:  658:
    20002:  659:int adventurerCard(int currentPlayer, struct gameState *state, int handPos, int drawntreasure) {
        -:  660:	int temphand[MAX_HAND];
        -:  661:	int cardDrawn;
    20002:  662:	int z = 0;
  4890352:  663:	while (drawntreasure<2) {
  4850348:  664:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
      251:  665:			shuffle(currentPlayer, state);
        -:  666:		}
  4850348:  667:		drawCard(currentPlayer, state);
        -:  668:		//printf("card drawn. \n");
  4850348:  669:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
  4850348:  670:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    40004:  671:			drawntreasure++; //THIS IS AN INTRODUCED BUG
        -:  672:		}
        -:  673:		else {
        -:  674:			//printf("Action Card Drawn.");
  4810344:  675:			temphand[z] = cardDrawn;
  4810344:  676:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  4810344:  677:			z++;
        -:  678:		}
        -:  679:	}
  4850348:  680:	while (z - 1 >= 0) {
  4810344:  681:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
  4810344:  682:		z = z - 1;
        -:  683:	}
    20002:  684:	return 0;
        -:  685:}
        -:  686:
    20000:  687:int stewardCard(int currentPlayer, struct gameState *state, int choice1, int choice2, int choice3, int handPos) {
    20000:  688:	if (choice1 == 1)
        -:  689:	{
        -:  690:		//+2 cards
     6473:  691:		drawCard(currentPlayer, state);
     6473:  692:		drawCard(currentPlayer, state);
        -:  693:	}
    13527:  694:	else if (choice1 == 2)
        -:  695:	{
        -:  696:		//+2 coins
     6690:  697:		state->coins = state->coins + 2;
        -:  698:	}
        -:  699:	else
        -:  700:	{
        -:  701:		//trash 2 cards in hand
     6837:  702:		discardCard(choice2, currentPlayer, state, 1);
     6837:  703:		discardCard(choice3, currentPlayer, state, 1);
        -:  704:	}
        -:  705:
        -:  706:	//discard card from hand
    20000:  707:	discardCard(handPos, currentPlayer, state, 0);
    20000:  708:	return 0;
        -:  709:}
        -:  710:
       28:  711:int embargoCard(struct gameState *state, int currentPlayer, int choice1, int handPos) {
        -:  712:	//+2 Coins
       28:  713:	state->coins = state->coins + 4; //THIS IS AN INTRODUCED BUG CHANGED THE NUMBER OF COINS RECEIVED FROM 2 TO 4
        -:  714:
        -:  715:	//see if selected pile is in play
       28:  716:	if (state->supplyCount[choice1] == -1)
        -:  717:	{
       10:  718:		return -1;
        -:  719:	}
        -:  720:
        -:  721:	//add embargo token to selected supply pile
       18:  722:	state->embargoTokens[choice1]++;
        -:  723:
        -:  724:	//trash card
       18:  725:	discardCard(handPos, currentPlayer, state, 1);
       18:  726:	return 0;
        -:  727:}
        -:  728:
       12:  729:int mineCard(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
       12:  730:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  731:
       12:  732:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  733:	{
        3:  734:		return -1;
        -:  735:	}
        -:  736:
        9:  737:	if (choice2 > treasure_map || choice2 < curse)
        -:  738:	{
    #####:  739:		return -1;
        -:  740:	}
        -:  741:
        9:  742:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  743:	{
        6:  744:		return -1;
        -:  745:	}
        -:  746:
        3:  747:	gainCard(choice2, state, 2, currentPlayer);
        -:  748:
        -:  749:	//discard card from hand
        3:  750:	discardCard(handPos, currentPlayer, state, 0);
        -:  751:
        -:  752:	//discard trashed card
       18:  753:	for (int i = 0; i < state->handCount[currentPlayer]; i++)
        -:  754:	{
       15:  755:		if (state->hand[currentPlayer][i] == i) // THIS IS AN INTRODUCED BUG CHANGED J TO I
        -:  756:		{
    #####:  757:			discardCard(i, currentPlayer, state, 0);
    #####:  758:			break;
        -:  759:		}
        -:  760:	}
        -:  761:
        3:  762:	return 0;
        -:  763:}
        -:  764:
       44:  765:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  766:{
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
       44:  772:  int currentPlayer = whoseTurn(state);
       44:  773:  int nextPlayer = currentPlayer + 1;
        -:  774:
       44:  775:  int tributeRevealedCards[2] = {-1, -1};
        -:  776:  int temphand[MAX_HAND];// moved above the if statement
       44:  777:  int drawntreasure=0;
        -:  778:  int cardDrawn;
       44:  779:  int z = 0;// this is the counter for the temp hand
       44:  780:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  781:    nextPlayer = 0;
        -:  782:  }
        -:  783:  
        -:  784:	
        -:  785:  //uses switch to select card and perform actions
       44:  786:  switch( card ) 
        -:  787:    {
        -:  788:    case adventurer:
        2:  789:		 return adventurerCard(currentPlayer, state, handPos, drawntreasure);
        -:  790: //     while(drawntreasure<2){
        -:  791:	//if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  792:	//  shuffle(currentPlayer, state);
        -:  793:	//}
        -:  794:	//drawCard(currentPlayer, state);
        -:  795:	//cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  796:	//if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  797:	//  drawntreasure++;
        -:  798:	//else{
        -:  799:	//  temphand[z]=cardDrawn;
        -:  800:	//  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  801:	//  z++;
        -:  802:	//}
        -:  803: //     }
        -:  804: //     while(z-1>=0){
        -:  805:	//state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  806:	//z=z-1;
        -:  807: //     }
        -:  808: //     return 0;
        -:  809:			
        -:  810:    case council_room:
        -:  811:      //+4 Cards
    #####:  812:      for (i = 0; i < 4; i++)
        -:  813:	{
    #####:  814:	  drawCard(currentPlayer, state);
        -:  815:	}
        -:  816:			
        -:  817:      //+1 Buy
    #####:  818:      state->numBuys++;
        -:  819:			
        -:  820:      //Each other player draws a card
    #####:  821:      for (i = 0; i < state->numPlayers; i++)
        -:  822:	{
    #####:  823:	  if ( i != currentPlayer )
        -:  824:	    {
    #####:  825:	      drawCard(i, state);
        -:  826:	    }
        -:  827:	}
        -:  828:			
        -:  829:      //put played card in played card pile
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
        -:  831:			
    #####:  832:      return 0;
        -:  833:			
        -:  834:    case feast:
        -:  835:      //gain card with cost up to 5
        -:  836:      //Backup hand
    #####:  837:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  838:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  839:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  840:      }
        -:  841:      //Backup hand
        -:  842:
        -:  843:      //Update Coins for Buy
    #####:  844:      updateCoins(currentPlayer, state, 5);
    #####:  845:      x = 1;//Condition to loop on
    #####:  846:      while( x == 1) {//Buy one card
    #####:  847:	if (supplyCount(choice1, state) <= 0){
        -:  848:	  if (DEBUG)
        -:  849:	    printf("None of that card left, sorry!\n");
        -:  850:
        -:  851:	  if (DEBUG){
        -:  852:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  853:	  }
        -:  854:	}
    #####:  855:	else if (state->coins < getCost(choice1)){
    #####:  856:	  printf("That card is too expensive!\n");
        -:  857:
        -:  858:	  if (DEBUG){
        -:  859:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  860:	  }
        -:  861:	}
        -:  862:	else{
        -:  863:
        -:  864:	  if (DEBUG){
        -:  865:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  866:	  }
        -:  867:
    #####:  868:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  869:	  x = 0;//No more buying cards
        -:  870:
        -:  871:	  if (DEBUG){
        -:  872:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  873:	  }
        -:  874:
        -:  875:	}
        -:  876:      }     
        -:  877:
        -:  878:      //Reset Hand
    #####:  879:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  880:	state->hand[currentPlayer][i] = temphand[i];
    #####:  881:	temphand[i] = -1;
        -:  882:      }
        -:  883:      //Reset Hand
        -:  884:      			
    #####:  885:      return 0;
        -:  886:			
        -:  887:    case gardens:
    #####:  888:      return -1;
        -:  889:			
        -:  890:    case mine:
       12:  891:		return mineCard(state, currentPlayer, choice1, choice2, handPos);
        -:  892: //     j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  893:
        -:  894: //     if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  895:	//{
        -:  896:	//  return -1;
        -:  897:	//}
        -:  898:	//	
        -:  899: //     if (choice2 > treasure_map || choice2 < curse)
        -:  900:	//{
        -:  901:	//  return -1;
        -:  902:	//}
        -:  903:
        -:  904: //     if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  905:	//{
        -:  906:	//  return -1;
        -:  907:	//}
        -:  908:
        -:  909: //     gainCard(choice2, state, 2, currentPlayer);
        -:  910:
        -:  911: //     //discard card from hand
        -:  912: //     discardCard(handPos, currentPlayer, state, 0);
        -:  913:
        -:  914: //     //discard trashed card
        -:  915: //     for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  916:	//{
        -:  917:	//  if (state->hand[currentPlayer][i] == j)
        -:  918:	//    {
        -:  919:	//      discardCard(i, currentPlayer, state, 0);			
        -:  920:	//      break;
        -:  921:	//    }
        -:  922:	//}
        -:  923:	//		
        -:  924: //     return 0;
        -:  925:			
        -:  926:    case remodel:
    #####:  927:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  928:
    #####:  929:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  930:	{
    #####:  931:	  return -1;
        -:  932:	}
        -:  933:
    #####:  934:      gainCard(choice2, state, 0, currentPlayer);
        -:  935:
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
        -:  938:
        -:  939:      //discard trashed card
    #####:  940:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  941:	{
    #####:  942:	  if (state->hand[currentPlayer][i] == j)
        -:  943:	    {
    #####:  944:	      discardCard(i, currentPlayer, state, 0);			
    #####:  945:	      break;
        -:  946:	    }
        -:  947:	}
        -:  948:
        -:  949:
    #####:  950:      return 0;
        -:  951:		
        -:  952:    case smithy:
        2:  953:		return smithyCard(currentPlayer, state, handPos);
        -:  954: //     //+3 Cards
        -:  955: //     for (i = 0; i < 3; i++)
        -:  956:	//{
        -:  957:	//  drawCard(currentPlayer, state);
        -:  958:	//}
        -:  959:	//		
        -:  960: //     //discard card from hand
        -:  961: //     discardCard(handPos, currentPlayer, state, 0);
        -:  962: //     return 0;
        -:  963:	//	
        -:  964:    case village:
        -:  965:      //+1 Card
    #####:  966:      drawCard(currentPlayer, state);
        -:  967:			
        -:  968:      //+2 Actions
    #####:  969:      state->numActions = state->numActions + 2;
        -:  970:			
        -:  971:      //discard played card from hand
    #####:  972:      discardCard(handPos, currentPlayer, state, 0);
    #####:  973:      return 0;
        -:  974:		
        -:  975:    case baron:
    #####:  976:      state->numBuys++;//Increase buys by 1!
    #####:  977:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  978:	int p = 0;//Iterator for hand!
    #####:  979:	int card_not_discarded = 1;//Flag for discard set!
    #####:  980:	while(card_not_discarded){
    #####:  981:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  982:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  983:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  984:	    state->discardCount[currentPlayer]++;
    #####:  985:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  986:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  987:	    }
    #####:  988:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  989:	    state->handCount[currentPlayer]--;
    #####:  990:	    card_not_discarded = 0;//Exit the loop
        -:  991:	  }
    #####:  992:	  else if (p > state->handCount[currentPlayer]){
        -:  993:	    if(DEBUG) {
        -:  994:	      printf("No estate cards in your hand, invalid choice\n");
        -:  995:	      printf("Must gain an estate if there are any\n");
        -:  996:	    }
    #####:  997:	    if (supplyCount(estate, state) > 0){
    #####:  998:	      gainCard(estate, state, 0, currentPlayer);
    #####:  999:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1000:	      if (supplyCount(estate, state) == 0){
    #####: 1001:		isGameOver(state);
        -: 1002:	      }
        -: 1003:	    }
    #####: 1004:	    card_not_discarded = 0;//Exit the loop
        -: 1005:	  }
        -: 1006:			    
        -: 1007:	  else{
    #####: 1008:	    p++;//Next card
        -: 1009:	  }
        -: 1010:	}
        -: 1011:      }
        -: 1012:			    
        -: 1013:      else{
    #####: 1014:	if (supplyCount(estate, state) > 0){
    #####: 1015:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1016:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1017:	  if (supplyCount(estate, state) == 0){
    #####: 1018:	    isGameOver(state);
        -: 1019:	  }
        -: 1020:	}
        -: 1021:      }
        -: 1022:	    
        -: 1023:      
    #####: 1024:      return 0;
        -: 1025:		
        -: 1026:    case great_hall:
        -: 1027:      //+1 Card
    #####: 1028:      drawCard(currentPlayer, state);
        -: 1029:			
        -: 1030:      //+1 Actions
    #####: 1031:      state->numActions++;
        -: 1032:			
        -: 1033:      //discard card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1035:      return 0;
        -: 1036:		
        -: 1037:    case minion:
        -: 1038:      //+1 action
    #####: 1039:      state->numActions++;
        -: 1040:			
        -: 1041:      //discard card from hand
    #####: 1042:      discardCard(handPos, currentPlayer, state, 0);
        -: 1043:			
    #####: 1044:      if (choice1)		//+2 coins
        -: 1045:	{
    #####: 1046:	  state->coins = state->coins + 2;
        -: 1047:	}
        -: 1048:			
    #####: 1049:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1050:	{
        -: 1051:	  //discard hand
    #####: 1052:	  while(numHandCards(state) > 0)
        -: 1053:	    {
    #####: 1054:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1055:	    }
        -: 1056:				
        -: 1057:	  //draw 4
    #####: 1058:	  for (i = 0; i < 4; i++)
        -: 1059:	    {
    #####: 1060:	      drawCard(currentPlayer, state);
        -: 1061:	    }
        -: 1062:				
        -: 1063:	  //other players discard hand and redraw if hand size > 4
    #####: 1064:	  for (i = 0; i < state->numPlayers; i++)
        -: 1065:	    {
    #####: 1066:	      if (i != currentPlayer)
        -: 1067:		{
    #####: 1068:		  if ( state->handCount[i] > 4 )
        -: 1069:		    {
        -: 1070:		      //discard hand
    #####: 1071:		      while( state->handCount[i] > 0 )
        -: 1072:			{
    #####: 1073:			  discardCard(handPos, i, state, 0);
        -: 1074:			}
        -: 1075:							
        -: 1076:		      //draw 4
    #####: 1077:		      for (j = 0; j < 4; j++)
        -: 1078:			{
    #####: 1079:			  drawCard(i, state);
        -: 1080:			}
        -: 1081:		    }
        -: 1082:		}
        -: 1083:	    }
        -: 1084:				
        -: 1085:	}
    #####: 1086:      return 0;
        -: 1087:		
        -: 1088:    case steward:
    #####: 1089:		stewardCard(currentPlayer, state, choice1, choice2, choice3, handPos);
        -: 1090: //     if (choice1 == 1)
        -: 1091:	//{
        -: 1092:	//  //+2 cards
        -: 1093:	//  drawCard(currentPlayer, state);
        -: 1094:	//  drawCard(currentPlayer, state);
        -: 1095:	//}
        -: 1096: //     else if (choice1 == 2)
        -: 1097:	//{
        -: 1098:	//  //+2 coins
        -: 1099:	//  state->coins = state->coins + 2;
        -: 1100:	//}
        -: 1101: //     else
        -: 1102:	//{
        -: 1103:	//  //trash 2 cards in hand
        -: 1104:	//  discardCard(choice2, currentPlayer, state, 1);
        -: 1105:	//  discardCard(choice3, currentPlayer, state, 1);
        -: 1106:	//}
        -: 1107:	//		
        -: 1108: //     //discard card from hand
        -: 1109: //     discardCard(handPos, currentPlayer, state, 0);
        -: 1110: //     return 0;
        -: 1111:		
        -: 1112:    case tribute:
    #####: 1113:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1114:	if (state->deckCount[nextPlayer] > 0){
    #####: 1115:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1116:	  state->deckCount[nextPlayer]--;
        -: 1117:	}
    #####: 1118:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1119:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1120:	  state->discardCount[nextPlayer]--;
        -: 1121:	}
        -: 1122:	else{
        -: 1123:	  //No Card to Reveal
        -: 1124:	  if (DEBUG){
        -: 1125:	    printf("No cards to reveal\n");
        -: 1126:	  }
        -: 1127:	}
        -: 1128:      }
        -: 1129:	    
        -: 1130:      else{
    #####: 1131:	if (state->deckCount[nextPlayer] == 0){
    #####: 1132:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1133:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1134:	    state->deckCount[nextPlayer]++;
    #####: 1135:	    state->discard[nextPlayer][i] = -1;
    #####: 1136:	    state->discardCount[nextPlayer]--;
        -: 1137:	  }
        -: 1138:			    
    #####: 1139:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1140:	} 
    #####: 1141:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1142:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1143:	state->deckCount[nextPlayer]--;
    #####: 1144:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1145:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1146:	state->deckCount[nextPlayer]--;
        -: 1147:      }    
        -: 1148:		       
    #####: 1149:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1150:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1151:	state->playedCardCount++;
    #####: 1152:	tributeRevealedCards[1] = -1;
        -: 1153:      }
        -: 1154:
    #####: 1155:      for (i = 0; i <= 2; i ++){
    #####: 1156:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1157:	  state->coins += 2;
        -: 1158:	}
        -: 1159:		    
    #####: 1160:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1161:	  drawCard(currentPlayer, state);
    #####: 1162:	  drawCard(currentPlayer, state);
        -: 1163:	}
        -: 1164:	else{//Action Card
    #####: 1165:	  state->numActions = state->numActions + 2;
        -: 1166:	}
        -: 1167:      }
        -: 1168:	    
    #####: 1169:      return 0;
        -: 1170:		
        -: 1171:    case ambassador:
    #####: 1172:      j = 0;		//used to check if player has enough cards to discard
        -: 1173:
    #####: 1174:      if (choice2 > 2 || choice2 < 0)
        -: 1175:	{
    #####: 1176:	  return -1;				
        -: 1177:	}
        -: 1178:
    #####: 1179:      if (choice1 == handPos)
        -: 1180:	{
    #####: 1181:	  return -1;
        -: 1182:	}
        -: 1183:
    #####: 1184:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1185:	{
    #####: 1186:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1187:	    {
    #####: 1188:	      j++;
        -: 1189:	    }
        -: 1190:	}
    #####: 1191:      if (j < choice2)
        -: 1192:	{
    #####: 1193:	  return -1;				
        -: 1194:	}
        -: 1195:
        -: 1196:      if (DEBUG) 
        -: 1197:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1198:
        -: 1199:      //increase supply count for choosen card by amount being discarded
    #####: 1200:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1201:			
        -: 1202:      //each other player gains a copy of revealed card
    #####: 1203:      for (i = 0; i < state->numPlayers; i++)
        -: 1204:	{
    #####: 1205:	  if (i != currentPlayer)
        -: 1206:	    {
    #####: 1207:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1208:	    }
        -: 1209:	}
        -: 1210:
        -: 1211:      //discard played card from hand
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1213:
        -: 1214:      //trash copies of cards returned to supply
    #####: 1215:      for (j = 0; j < choice2; j++)
        -: 1216:	{
    #####: 1217:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1218:	    {
    #####: 1219:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1220:		{
    #####: 1221:		  discardCard(i, currentPlayer, state, 1);
    #####: 1222:		  break;
        -: 1223:		}
        -: 1224:	    }
        -: 1225:	}			
        -: 1226:
    #####: 1227:      return 0;
        -: 1228:		
        -: 1229:    case cutpurse:
        -: 1230:
    #####: 1231:      updateCoins(currentPlayer, state, 2);
    #####: 1232:      for (i = 0; i < state->numPlayers; i++)
        -: 1233:	{
    #####: 1234:	  if (i != currentPlayer)
        -: 1235:	    {
    #####: 1236:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1237:		{
    #####: 1238:		  if (state->hand[i][j] == copper)
        -: 1239:		    {
    #####: 1240:		      discardCard(j, i, state, 0);
    #####: 1241:		      break;
        -: 1242:		    }
    #####: 1243:		  if (j == state->handCount[i])
        -: 1244:		    {
    #####: 1245:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1246:			{
        -: 1247:			  if (DEBUG)
        -: 1248:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1249:			}	
    #####: 1250:		      break;
        -: 1251:		    }		
        -: 1252:		}
        -: 1253:					
        -: 1254:	    }
        -: 1255:				
        -: 1256:	}				
        -: 1257:
        -: 1258:      //discard played card from hand
    #####: 1259:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1260:
    #####: 1261:      return 0;
        -: 1262:
        -: 1263:		
        -: 1264:    case embargo: 
       28: 1265:		 return embargoCard(state, currentPlayer, choice1, handPos);
        -: 1266: //     //+2 Coins
        -: 1267: //     state->coins = state->coins + 2;
        -: 1268:	//		
        -: 1269: //     //see if selected pile is in play
        -: 1270: //     if ( state->supplyCount[choice1] == -1 )
        -: 1271:	//{
        -: 1272:	//  return -1;
        -: 1273:	//}
        -: 1274:	//		
        -: 1275: //     //add embargo token to selected supply pile
        -: 1276: //     state->embargoTokens[choice1]++;
        -: 1277:	//		
        -: 1278: //     //trash card
        -: 1279: //     discardCard(handPos, currentPlayer, state, 1);		
        -: 1280: //     return 0;
        -: 1281:		
        -: 1282:    case outpost:
        -: 1283:      //set outpost flag
    #####: 1284:      state->outpostPlayed++;
        -: 1285:			
        -: 1286:      //discard card
    #####: 1287:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1288:      return 0;
        -: 1289:		
        -: 1290:    case salvager:
        -: 1291:      //+1 buy
    #####: 1292:      state->numBuys++;
        -: 1293:			
    #####: 1294:      if (choice1)
        -: 1295:	{
        -: 1296:	  //gain coins equal to trashed card
    #####: 1297:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1298:	  //trash card
    #####: 1299:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1300:	}
        -: 1301:			
        -: 1302:      //discard card
    #####: 1303:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1304:      return 0;
        -: 1305:		
        -: 1306:    case sea_hag:
    #####: 1307:      for (i = 0; i < state->numPlayers; i++){
    #####: 1308:	if (i != currentPlayer){
    #####: 1309:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1310:	  state->discardCount[i]++;
    #####: 1311:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1312:	}
        -: 1313:      }
    #####: 1314:      return 0;
        -: 1315:		
        -: 1316:    case treasure_map:
        -: 1317:      //search hand for another treasure_map
    #####: 1318:      index = -1;
    #####: 1319:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1320:	{
    #####: 1321:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1322:	    {
    #####: 1323:	      index = i;
    #####: 1324:	      break;
        -: 1325:	    }
        -: 1326:	}
    #####: 1327:      if (index > -1)
        -: 1328:	{
        -: 1329:	  //trash both treasure cards
    #####: 1330:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1331:	  discardCard(index, currentPlayer, state, 1);
        -: 1332:
        -: 1333:	  //gain 4 Gold cards
    #####: 1334:	  for (i = 0; i < 4; i++)
        -: 1335:	    {
    #####: 1336:	      gainCard(gold, state, 1, currentPlayer);
        -: 1337:	    }
        -: 1338:				
        -: 1339:	  //return success
    #####: 1340:	  return 1;
        -: 1341:	}
        -: 1342:			
        -: 1343:      //no second treasure_map found in hand
    #####: 1344:      return -1;
        -: 1345:    }
        -: 1346:	
    #####: 1347:  return -1;
        -: 1348:}
        -: 1349:
    33695: 1350:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1351:{
        -: 1352:	
        -: 1353:  //if card is not trashed, added to Played pile 
    33695: 1354:  if (trashFlag < 1)
        -: 1355:    {
        -: 1356:      //add card to played pile
    20003: 1357:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    20003: 1358:      state->playedCardCount++;
        -: 1359:    }
        -: 1360:	
        -: 1361:  //set played card to -1
    33695: 1362:  state->hand[currentPlayer][handPos] = -1;
        -: 1363:	
        -: 1364:  //remove card from player's hand
    33695: 1365:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1366:    {
        -: 1367:      //reduce number of cards in hand
      329: 1368:      state->handCount[currentPlayer]--;
        -: 1369:    }
    33366: 1370:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1371:    {
        -: 1372:      //reduce number of cards in hand
       25: 1373:      state->handCount[currentPlayer]--;
        -: 1374:    }
        -: 1375:  else 	
        -: 1376:    {
        -: 1377:      //replace discarded card with last card in hand
    33341: 1378:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1379:      //set last card to -1
    33341: 1380:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1381:      //reduce number of cards in hand
    33341: 1382:      state->handCount[currentPlayer]--;
        -: 1383:    }
        -: 1384:	
    33695: 1385:  return 0;
        -: 1386:}
        -: 1387:
       14: 1388:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1389:{
        -: 1390:  //Note: supplyPos is enum of choosen card
        -: 1391:	
        -: 1392:  //check if supply pile is empty (0) or card is not used in game (-1)
       14: 1393:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1394:    {
    #####: 1395:      return -1;
        -: 1396:    }
        -: 1397:	
        -: 1398:  //added card for [whoseTurn] current player:
        -: 1399:  // toFlag = 0 : add to discard
        -: 1400:  // toFlag = 1 : add to deck
        -: 1401:  // toFlag = 2 : add to hand
        -: 1402:
       14: 1403:  if (toFlag == 1)
        -: 1404:    {
    #####: 1405:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1406:      state->deckCount[player]++;
        -: 1407:    }
       14: 1408:  else if (toFlag == 2)
        -: 1409:    {
        3: 1410:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1411:      state->handCount[player]++;
        -: 1412:    }
        -: 1413:  else
        -: 1414:    {
       11: 1415:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       11: 1416:      state->discardCount[player]++;
        -: 1417:    }
        -: 1418:	
        -: 1419:  //decrease number in supply pile
       14: 1420:  state->supplyCount[supplyPos]--;
        -: 1421:	 
       14: 1422:  return 0;
        -: 1423:}
        -: 1424:
    60010: 1425:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1426:{
        -: 1427:  int i;
        -: 1428:	
        -: 1429:  //reset coin count
    60010: 1430:  state->coins = 0;
        -: 1431:
        -: 1432:  //add coins for each Treasure card in player's hand
   360066: 1433:  for (i = 0; i < state->handCount[player]; i++)
        -: 1434:    {
   300056: 1435:      if (state->hand[player][i] == copper)
        -: 1436:	{
   210124: 1437:	  state->coins += 1;
        -: 1438:	}
    89932: 1439:      else if (state->hand[player][i] == silver)
        -: 1440:	{
        2: 1441:	  state->coins += 2;
        -: 1442:	}
    89930: 1443:      else if (state->hand[player][i] == gold)
        -: 1444:	{
        2: 1445:	  state->coins += 3;
        -: 1446:	}	
        -: 1447:    }	
        -: 1448:
        -: 1449:  //add bonus
    60010: 1450:  state->coins += bonus;
        -: 1451:
    60010: 1452:  return 0;
        -: 1453:}
        -: 1454:
        -: 1455:
        -: 1456://end of dominion.c
        -: 1457:
