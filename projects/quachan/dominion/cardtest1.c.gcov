        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*This file tests the smithy card functionality*/
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <assert.h>
        -:    8:#include "rngs.h"
        -:    9:
        -:   10:
        -:   11:
function main called 1 returned 100% blocks executed 87%
        1:   12:int main() {
        -:   13:	struct gameState G, testG;
        1:   14:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   15:		sea_hag, tribute, smithy };
        1:   16:	initializeGame(2, k, 10, &G);
call    0 returned 100%
        1:   17:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   18:	int initialNumCards = testG.handCount[0];
        1:   19:	printf("Testing Smithy... \n\n");
call    0 returned 100%
        1:   20:	printf("Testing initial number of cards in hand...\n");
call    0 returned 100%
        1:   21:	printf("Initial number of cards in hand: %d, Expected %d. \n", initialNumCards, initialNumCards);
call    0 returned 100%
        1:   22:	if (initialNumCards == 5) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   23:		printf("Test PASSED. Correct number of cards to begin with.\n\n");
call    0 returned 100%
        -:   24:	}
        -:   25:	else {
    #####:   26:		printf("Test FAILED. Incorrect number of starting cards.\n\n");
call    0 never executed
        -:   27:	}
        1:   28:	smithyCard(0, &testG, 1);
call    0 returned 100%
        1:   29:	printf("Calling smityCard()...\n");
call    0 returned 100%
        1:   30:	printf("Final number of cards in hand: %d, Expected %d\n", testG.handCount[0], initialNumCards + 2);
call    0 returned 100%
        1:   31:	if (testG.handCount[0] == initialNumCards + 2) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   32:		printf("Test PASSED. Correct number of cards drawn.");
call    0 never executed
        -:   33:	}
        -:   34:	else {
        1:   35:		printf("TEST FAILED! Incorrect number of cards in hand. \n");
call    0 returned 100%
        -:   36:	}
        1:   37:	return 0;
        -:   38:}
