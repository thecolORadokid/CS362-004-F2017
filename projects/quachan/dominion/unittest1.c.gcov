        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*This file tests the buyCard()*/
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <assert.h>
        -:    8:#include "rngs.h"
        -:    9:#include <stdlib.h>
        -:   10:
function main called 1 returned 100% blocks executed 95%
        1:   11:int main() {
        1:   12:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   13:	int seed = 1000; int numPlayers = 2; int thisPlayer = 0;
        -:   14:	struct gameState G, testG;
        1:   15:	int k[10] = { adventurer, embargo, village, minion, mine, cutpurse,sea_hag, tribute, smithy, council_room };
        1:   16:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   17:
        1:   18:	G.hand[thisPlayer][0] = mine;
        1:   19:	G.hand[thisPlayer][1] = copper;
        1:   20:	G.hand[thisPlayer][2] = silver;
        1:   21:	G.hand[thisPlayer][3] = gold;
        1:   22:	G.hand[thisPlayer][4] = estate;
        -:   23:	
        1:   24:	printf("Testing buyCard()...\n\n");
call    0 returned 100%
        -:   25:	//check the case where you have no buys left
        1:   26:	printf("Testing case numBuys = 0...\n");
call    0 returned 100%
       27:   27:	for (int i = 0; i < treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       26:   28:		G.numBuys = 0;
       26:   29:		memcpy(&testG, &G, sizeof(struct gameState));
       26:   30:		int result = buyCard(i, &testG);
call    0 returned 100%
       26:   31:		if (result != -1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   32:			printf("Error for card: %d\n.", i);
call    0 never executed
        -:   33:		}
        -:   34:	}
        1:   35:	printf("TEST SUCCESSFUL. NO CARDS WERE PURCHASED WHEN NO BUYS WERE AVAILABLE.\n\n");
call    0 returned 100%
        -:   36:	
        -:   37:	//check the case where you can buy something
        1:   38:	printf("Testing case numBuys > 0...\n");
call    0 returned 100%
       27:   39:	for (int j = 0; j < treasure_map; j++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       26:   40:		G.numBuys = 1;
       26:   41:		memcpy(&testG, &G, sizeof(struct gameState));
       26:   42:		int result = buyCard(j, &testG);
call    0 returned 100%
        -:   43:		if (result != 0) {
        -:   44:			//printf("ERROR.");
        -:   45:		}
        -:   46:	}
        1:   47:	printf("TEST SUCCESSFUL. NORMAL BUYING PHASE.\n\n");
call    0 returned 100%
        -:   48:	//check the case where you have enough money, but there are no cards of any type
        1:   49:	printf("Testing case numBuys > 0, excess coin, but no supply...\n");
call    0 returned 100%
       27:   50:	for (int m = 0; m < treasure_map; m++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       26:   51:		G.coins = 10;
      728:   52:		for (int k = 0; k < treasure_map + 1; k++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      702:   53:			G.supplyCount[k] = 0;
        -:   54:		}
       26:   55:		memcpy(&testG, &G, sizeof(struct gameState));
       26:   56:		int result = buyCard(m, &testG);
call    0 returned 100%
       26:   57:		if (result != -1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   58:			printf("Error for card: %d\n.", m);
call    0 never executed
        -:   59:		}
        -:   60:	}
        1:   61:	printf("TEST SUCCESSFUL. NO CARDS PURCHASED WHEN NONE ARE AVAILABLE.\n\n");
call    0 returned 100%
        -:   62:
        -:   63:	//check the case where you have no money and every card is available
        1:   64:	printf("Testing case coins = 0, all cards available...\n");
call    0 returned 100%
       27:   65:	for (int n = 0; n < treasure_map; n++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       26:   66:		G.coins = 0;
      728:   67:		for (int k = 0; k < treasure_map + 1; k++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      702:   68:			G.supplyCount[k] = 10;
        -:   69:		}
       26:   70:		memcpy(&testG, &G, sizeof(struct gameState));
       26:   71:		int result = buyCard(n, &testG);
call    0 returned 100%
       26:   72:		if (result != -1) {
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        2:   73:			printf("Error for card: %d\n",n);
call    0 returned 100%
        -:   74:		}
        -:   75:	}
        1:   76:	printf("TEST SUCCESSFUL. NO CARDS PURCHASED WHEN YOU HAVE NO COIN.\n\n");
call    0 returned 100%
        1:   77:	return 0;
        -:   78:}
